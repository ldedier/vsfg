#!/bin/bash

LANGUAGE_C=0
LANGUAGE_CPP=1

LANGUAGES=(c c++)
COMPILERS=(gcc g++)

FILE=valgrind.supp

DEFAULT_LANGUAGE=$LANGUAGE_C

COMPILER=${COMPILERS[$DEFAULT_LANGUAGE]}
LANGUAGE=${LANGUAGES[$DEFAULT_LANGUAGE]}

function logLanguages {
	echo "available languages:" 2>&1
	for lan in "${LANGUAGES[@]}"
	do
		echo "	Â· $lan"	2>&1
	done
}

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -f|--file)
	if [ $# -lt 2 ] ; then
		echo "$key requires a filename as argument" 2>&1
		exit 1
	fi
    FILE="$2"
    shift # past argument
    shift # past value
    ;;
    -l|--language)
	COMPILER="unknown"
	if [ $# -lt 2 ] ; then
		echo "$key requires a language as argument" 2>&1
		echo 2>&1
		logLanguages
		exit 1
	fi
	LANGUAGE=$2
	for i in "${!LANGUAGES[@]}";
	do
		if [[ "${LANGUAGES[$i]}" = $LANGUAGE ]]; then
			COMPILER=${COMPILERS[$i]}
			break
		fi
	done
	if [ $COMPILER = "unknown" ] ; then
		echo "$LANGUAGE: Unknown language" 2>&1
		logLanguages
		exit 1
	fi
    shift # past argument
    shift # past value
    ;;
    -h|--help)
		echo "Usage: $0 [-f/--filename suppressionsFileName] [-l/--language mainLanguage] [-m/--main mainFileName]

[-l/--language] valid arguments: {c, c++}"
		exit 0
    ;;
    *)    # unknown option
		echo "$1: Unknown option" 2>&1
		exit 1
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

com='
empty_binary="$(mktemp)"
empty_main=".test_empty.c"
supp_file=".my_supp.supp"
gcc -o $empty_binary $empty_main
valgrind --leak-check=full --gen-suppressions=all "./${empty_binary}" 2>&1 | perl .supp_getter.perl > $supp_file
rm $empty_binary
rm -rf "${empty_binary}.dSYM"
'
